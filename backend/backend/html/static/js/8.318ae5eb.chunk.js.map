{"version":3,"sources":["util/dates.js","components/dashboard/setup/SprintsTable.js","components/dashboard/setup/SprintModal.js","components/dashboard/setup/SemesterSetup.js","components/dashboard/ComparisonChart.js","components/dashboard/MetricCallout.js","views/dashboard/StudentActivity.js","views/dashboard/Dashboard.js"],"names":["moment","extendMoment","Moment","daysBetween","dateStr","dateStr2","fmt","start","diff","formatDate","format","dateDifference","date","date2","m1","m2","TableHeader","map","header","index","scope","TableBody","props","sprintData","item","id","startDate","endDate","color","variant","size","onClick","openSprintModal","SprintsTable","hover","striped","SprintModal","setStartDate","useState","setEndDate","startDateError","setStartDateError","endDateError","setEndDateError","editIndex","setEditIndex","useEffect","initialData","modalData","editMode","dateOverlapsSprint","sprints","some","sprint","intervalDate1","intervalDate2","interval","range","within","dateInInterval","intervalOverlapsSprint","date1","end","start1","end1","inter1","inter2","overlaps","adjacent","overlappingIntervals","validateEndDate","newDate","length","visible","modalOpen","onDismiss","setModalOpen","className","htmlFor","value","type","onChange","e","target","invalid","required","semesterCode","window","confirm","removeSprint","disabled","addSprint","SemesterSetup","setSemesterCode","organization","setOrganization","setSprints","setModalData","editOrganization","setEditOrganization","semester","sprintIndex","placeholder","alert","replaceIndex","editing","newSprint","newSprints","push","sort","s1","s2","forEach","splice","getRadarDataset","label","data","rgb","red","green","blue","mainRGB","backgroundColor","borderColor","borderWidth","pointBackgroundColor","pointBorderColor","pointHighlightFill","pointHighlightStroke","ComparisonChart","labels","studentData","classData","datasets","MetricCallout","toRelativeScale","otherData","toFixed","StudentActivity","user","setStudentData","useMemo","Commits","Pulls","Issues","ActiveDays","norm","Object","keys","get","sprintId","then","result","classValues","studentValues","key","score","Fragment","md","span","offset","lg","xl","values","sm","xs","Dashboard"],"mappings":"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","file":"static/js/8.318ae5eb.chunk.js","sourcesContent":["import Moment from 'moment'\nimport { extendMoment } from 'moment-range'\n\nconst moment = extendMoment(Moment)\n\nexport const daysBetween = (dateStr, dateStr2) => {\n  const fmt = 'YYYY-MM-DD'\n  const start = moment(dateStr, fmt)\n  const end = moment(dateStr2, fmt)\n\n  return end.diff(start, 'days')\n}\n\nexport const formatDate = (dateStr) => {\n  const date = moment(dateStr)\n  return date.format('ddd, MMM Do, YYYY')\n}\n\nexport const dateDifference = (date, date2) => {\n  const m1 = moment(date)\n  const m2 = moment(date2)\n  return m1.diff(m2)\n}\n\nexport const dateLessThan = (date, date2) => {\n  return dateDifference(date, date2) < 0\n}\n\nexport const dateInInterval = (date, intervalDate1, intervalDate2) => {\n  const interval = moment.range(intervalDate1, intervalDate2)\n  const m = moment(date)\n  return m.within(interval)\n}\n\nexport const overlappingIntervals = (start, end, start1, end1) => {\n  const inter1 = moment.range(start, end)\n  const inter2 = moment.range(start1, end1)\n  return inter1.overlaps(inter2, { adjacent: true })\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {\n  CButton,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n} from '@coreui/react'\nimport { daysBetween, formatDate } from 'src/util/dates'\n\nconst SprintsTable = (props) => {\n  return (\n    <CTable hover striped>\n      <TableHeader />\n      <TableBody sprintData={props.sprintData} openSprintModal={props.openSprintModal} />\n    </CTable>\n  )\n}\n\nSprintsTable.propTypes = {\n  sprintData: PropTypes.arrayOf(PropTypes.object).isRequired,\n  openSprintModal: PropTypes.func.isRequired,\n}\n\nconst TableHeader = () => {\n  const headers = ['#', 'Details', '']\n  return (\n    <CTableHead>\n      <CTableRow>\n        {headers.map((header, index) => (\n          <CTableHeaderCell key={index + header} scope=\"col\">\n            {header}\n          </CTableHeaderCell>\n        ))}\n      </CTableRow>\n    </CTableHead>\n  )\n}\n\nconst TableBody = (props) => {\n  return (\n    <CTableBody>\n      {props.sprintData.map((item, index) => (\n        <CTableRow key={index + item.startDate}>\n          <CTableHeaderCell scope=\"row\">{item.id}</CTableHeaderCell>\n          <CTableDataCell>\n            <strong>Start:</strong> {formatDate(item.startDate)}\n            <br />\n            <strong>End:</strong> {formatDate(item.endDate)}\n            <br />\n            <strong>Days:</strong> {daysBetween(item.startDate, item.endDate)}\n          </CTableDataCell>\n          <CTableDataCell>\n            <CButton\n              color=\"primary\"\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => {\n                props.openSprintModal(item)\n              }}\n            >\n              Edit\n            </CButton>\n          </CTableDataCell>\n        </CTableRow>\n      ))}\n    </CTableBody>\n  )\n}\n\nTableBody.propTypes = {\n  sprintData: PropTypes.arrayOf(PropTypes.object).isRequired,\n  openSprintModal: PropTypes.func.isRequired,\n}\n\nexport default SprintsTable\n","import React, { useEffect, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport {\n  CButton,\n  CForm,\n  CFormControl,\n  CFormFeedback,\n  CFormLabel,\n  CModal,\n  CModalBody,\n  CModalFooter,\n  CModalHeader,\n  CModalTitle,\n} from '@coreui/react'\nimport { dateInInterval, dateLessThan, daysBetween, overlappingIntervals } from 'src/util/dates'\n\nconst SprintModal = (props) => {\n  const [startDate, setStartDate] = useState('')\n  const [endDate, setEndDate] = useState('')\n  const [startDateError, setStartDateError] = useState('')\n  const [endDateError, setEndDateError] = useState('')\n  const [editIndex, setEditIndex] = useState(-1)\n\n  useEffect(() => {\n    const initialData = props.modalData\n    if (!initialData) return\n\n    const editing = initialData.editIndex !== -1\n    if (editing) {\n      setEditIndex(initialData.editIndex)\n\n      const sprintData = initialData.sprintData\n      setStartDate(sprintData.startDate)\n      setEndDate(sprintData.endDate)\n    } else {\n      setEditIndex(-1)\n      setStartDate('')\n      setEndDate('')\n    }\n  }, [props.modalData])\n\n  const editMode = () => editIndex !== -1\n\n  const dateOverlapsSprint = (date) => {\n    return props.sprints.some(\n      (sprint, index) =>\n        index !== editIndex && dateInInterval(date, sprint.startDate, sprint.endDate),\n    )\n  }\n\n  const intervalOverlapsSprint = (date1, date2) => {\n    return props.sprints.some(\n      (sprint, index) =>\n        index !== editIndex && overlappingIntervals(date1, date2, sprint.startDate, sprint.endDate),\n    )\n  }\n\n  const validateStartDate = (newDate) => {\n    if (dateOverlapsSprint(newDate)) {\n      setStartDateError('Date overlaps an existing sprint.')\n    } else if (intervalOverlapsSprint(newDate, endDate)) {\n      setStartDateError('This sprint overlaps an existing sprint.')\n    } else {\n      setStartDateError('')\n    }\n  }\n\n  const validateEndDate = (newDate) => {\n    if (dateOverlapsSprint(newDate)) {\n      setEndDateError('Date overlaps an existing sprint.')\n    } else if (startDate.length !== 0 && dateLessThan(newDate, startDate)) {\n      setEndDateError('End date is less than start date.')\n    } else {\n      setEndDateError('')\n    }\n  }\n\n  return (\n    <CModal visible={props.modalOpen} onDismiss={() => props.setModalOpen(false)}>\n      <CModalHeader onDismiss={() => props.setModalOpen(false)}>\n        <CModalTitle>{editMode() ? 'Edit' : 'Add'} Sprint</CModalTitle>\n      </CModalHeader>\n\n      <CModalBody>\n        <CForm>\n          <div className=\"mb-3\">\n            <CFormLabel htmlFor=\"startInput\">Start Date</CFormLabel>\n            <CFormControl\n              id=\"startInput\"\n              value={startDate}\n              type=\"date\"\n              onChange={(e) => {\n                setStartDate(e.target.value)\n                validateStartDate(e.target.value)\n              }}\n              invalid={startDateError.length !== 0}\n              required\n            />\n            <CFormFeedback invalid>{startDateError}</CFormFeedback>\n          </div>\n          <div className=\"mb-3\">\n            <CFormLabel htmlFor=\"endInput\">End Date</CFormLabel>\n            <CFormControl\n              id=\"endInput\"\n              value={endDate}\n              type=\"date\"\n              onChange={(e) => {\n                setEndDate(e.target.value)\n                validateEndDate(e.target.value)\n              }}\n              invalid={endDateError.length !== 0}\n              required\n            />\n            <CFormFeedback invalid>{endDateError}</CFormFeedback>\n          </div>\n          <h6 className=\"mt-4 mb-2\">Days: {daysBetween(startDate, endDate)}</h6>\n          <h6 className=\"mb-4\">Semester: {props.semesterCode}</h6>\n          {editMode() && (\n            <CButton\n              color=\"danger\"\n              variant=\"outline\"\n              onClick={() => {\n                if (window.confirm('Delete Sprint ' + (editIndex + 1) + '?')) {\n                  props.removeSprint(editIndex)\n                  props.setModalOpen(false)\n                }\n              }}\n            >\n              Delete\n            </CButton>\n          )}\n        </CForm>\n      </CModalBody>\n\n      <CModalFooter>\n        <CButton color=\"secondary\" onClick={() => props.setModalOpen(false)}>\n          Close\n        </CButton>\n        <CButton\n          color=\"primary\"\n          disabled={startDateError.length !== 0 || endDateError.length !== 0}\n          onClick={() => {\n            const added = props.addSprint(startDate, endDate, editIndex)\n            if (added) props.setModalOpen(false)\n          }}\n        >\n          Save\n        </CButton>\n      </CModalFooter>\n    </CModal>\n  )\n}\n\nSprintModal.propTypes = {\n  modalOpen: PropTypes.bool.isRequired,\n  setModalOpen: PropTypes.func.isRequired,\n  modalData: PropTypes.object,\n  addSprint: PropTypes.func.isRequired,\n  removeSprint: PropTypes.func.isRequired,\n  semesterCode: PropTypes.string.isRequired,\n  sprints: PropTypes.arrayOf(PropTypes.object).isRequired,\n}\n\nexport default SprintModal\n","import React, { useEffect, useState } from 'react'\nimport { CButton, CContainer, CFormControl } from '@coreui/react'\nimport SprintsTable from './SprintsTable'\nimport SprintModal from './SprintModal'\nimport { dateDifference } from 'src/util/dates'\n\nconst SemesterSetup = () => {\n  const [semesterCode, setSemesterCode] = useState('')\n  const [organization, setOrganization] = useState('')\n  const [sprints, setSprints] = useState([])\n  const [modalOpen, setModalOpen] = useState(false)\n  const [modalData, setModalData] = useState(null)\n  const [editOrganization, setEditOrganization] = useState(false)\n\n  useEffect(() => {\n    // TODO: fetch sprint/ organization data from server\n    const fetchResult = [\n      { id: 1, semester: 'spring2021', startDate: '2021-01-25', endDate: '2021-02-14' },\n      { id: 2, semester: 'spring2021', startDate: '2021-02-15', endDate: '2021-03-08' },\n      { id: 3, semester: 'spring2021', startDate: '2021-03-09', endDate: '2021-03-28' },\n      //{ id: 4, semester: 'spring2021', startDate: '2021-03-29', endDate: '2021-04-25' },\n      //{ id: 5, semester: 'spring2021', startDate: '2021-04-26', endDate: '2021-05-14' },\n    ]\n    setSprints(fetchResult)\n    // setSemesterCode(\"sp2021\")\n    // setOrganization(\"csucs314s21\")\n  }, [])\n\n  const openSprintModal = (sprintData = null) => {\n    const sprintIndex = sprintData ? sprintData.id - 1 : -1\n    const data = { editIndex: sprintIndex, sprintData: sprintData }\n    setModalData(data)\n    setModalOpen(true)\n  }\n\n  const addSprint = (start, end, replaceIndex) => {\n    const editing = replaceIndex !== -1\n    /* if (!editing && sprints.some((sprint) => sprint.startDate === start)) {\n      alert('Attempting to add duplicate start date.')\n      return false\n    } */\n\n    const newSprint = { id: -1, semester: semesterCode, startDate: start, endDate: end }\n    const newSprints = [...sprints]\n    if (!editing) {\n      newSprints.push(newSprint)\n    } else {\n      newSprints[replaceIndex] = newSprint\n    }\n    newSprints.sort((s1, s2) => dateDifference(s1, s2))\n    newSprints.forEach((sprint, index) => (sprint.id = index + 1))\n    setSprints(newSprints)\n    return true\n  }\n\n  const removeSprint = (index) => {\n    if (index < 0 || index >= sprints.length) {\n      alert('Failed to remove sprint: invalid index')\n      return false\n    }\n\n    const newSprints = [...sprints]\n    newSprints.splice(index, 1)\n    newSprints.forEach((sprint, index) => (sprint.id = index + 1))\n    setSprints(newSprints)\n    return true\n  }\n\n  return (\n    <CContainer className=\"mb-4\">\n      <h2 className=\"text-center\">Class Configuration</h2>\n\n      <hr />\n      <h4 className=\"fw-bold mb-4\">Base Requirements</h4>\n      <h5 className=\"mb-4\">Semester Code: {semesterCode}</h5>\n\n      <h5>GitHub Organization: {organization}</h5>\n      {editOrganization && (\n        <CFormControl\n          type=\"text\"\n          placeholder=\"ex: csucs314s21\"\n          value={organization}\n          onChange={(e) => setOrganization(e.target.value)}\n        />\n      )}\n      <CButton\n        className=\"mt-2 mb-2\"\n        color=\"info\"\n        variant=\"outline\"\n        size=\"sm\"\n        onClick={() => {\n          if (editOrganization && organization.length > 0) {\n            // TODO: save change to database?\n          }\n          setEditOrganization(!editOrganization)\n        }}\n      >\n        {!editOrganization ? 'Edit' : !organization ? 'Cancel' : 'Save'}\n      </CButton>\n\n      <hr />\n      <h4 className=\"fw-bold mb-3\">Sprints</h4>\n      <SprintsTable sprintData={sprints} openSprintModal={openSprintModal} />\n      <div className=\"d-grid gap-2\">\n        <CButton\n          color=\"dark\"\n          size=\"sm\"\n          onClick={() => {\n            if (semesterCode && organization) openSprintModal()\n            else alert('Provide a valid semester and organization before configuring sprints.')\n          }}\n        >\n          Add Sprint\n        </CButton>\n      </div>\n\n      <SprintModal\n        modalOpen={modalOpen}\n        setModalOpen={setModalOpen}\n        modalData={modalData}\n        addSprint={addSprint}\n        removeSprint={removeSprint}\n        semesterCode={semesterCode}\n        sprints={sprints}\n      />\n    </CContainer>\n  )\n}\n\nSemesterSetup.propTypes = {}\n\nexport default SemesterSetup\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { CChartRadar } from '@coreui/react-chartjs'\n\nconst ComparisonChart = ({ labels, studentData, classData }) => {\n  return (\n    <CChartRadar\n      data={{\n        labels: labels,\n        datasets: [\n          getRadarDataset('Me', studentData, [54, 162, 235]),\n          getRadarDataset('Class', classData, [180, 182, 187]),\n        ],\n      }}\n    />\n  )\n}\n\nComparisonChart.propTypes = {\n  labels: PropTypes.arrayOf(PropTypes.string).isRequired,\n  studentData: PropTypes.arrayOf(PropTypes.number).isRequired,\n  classData: PropTypes.arrayOf(PropTypes.number).isRequired,\n}\n\nconst getRadarDataset = (label, data, rgb) => {\n  const [red, green, blue] = rgb\n  const mainRGB = `${red}, ${green}, ${blue}`\n\n  return {\n    label: label,\n    backgroundColor: `rgba(${mainRGB}, 0.2)`,\n    borderColor: `rgba(${mainRGB}, 1)`,\n    borderWidth: 2,\n    pointBackgroundColor: `rgba(${mainRGB}, 1)`,\n    pointBorderColor: '#fff',\n    pointHighlightFill: '#fff',\n    pointHighlightStroke: `rgba(${mainRGB}, 1)`,\n    data: data,\n  }\n}\n\nexport default ComparisonChart\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { CCallout } from '@coreui/react'\n\nconst MetricCallout = ({ label, value }) => {\n  return (\n    <CCallout color=\"dark\" className=\"bg-white\">\n      <small>{label}</small>\n      <br />\n      <strong className=\"h5\">{value || '-'}</strong>\n    </CCallout>\n  )\n}\n\nMetricCallout.propTypes = {\n  label: PropTypes.string.isRequired,\n  value: PropTypes.number,\n}\n\nexport default MetricCallout\n","import React, { useEffect, useMemo, useState } from 'react'\nimport { CCol, CRow } from '@coreui/react'\nimport ComparisonChart from 'src/components/dashboard/ComparisonChart'\nimport MetricCallout from 'src/components/dashboard/MetricCallout'\n\nimport { get } from 'src/util/requests'\nimport PropTypes from 'prop-types'\n\nconst StudentActivity = ({ user }) => {\n  const [studentData, setStudentData] = useState([])\n  const labels = useMemo(\n    () => ({\n      Commits: 'Commits',\n      Pulls: 'Pulls',\n      Issues: 'Issues',\n      ActiveDays: 'Active Days',\n    }),\n    [],\n  )\n  const norm = Object.keys(labels).map(() => 100)\n\n  useEffect(() => {\n    get('StudentActivity', `${user.id}`, { sprintId: 1 }).then((result) => {\n      if (!result) {\n        return\n      }\n      const classValues = []\n      let studentValues = []\n      for (const key of Object.keys(labels)) {\n        classValues.push(result[key].target)\n        studentValues.push(result[key].score)\n      }\n      studentValues = toRelativeScale(studentValues, classValues)\n      setStudentData(studentValues)\n    })\n  }, [labels, user.id])\n\n  return (\n    <React.Fragment>\n      <h4 className=\"mt-4\">Class Perspective</h4>\n      <CRow className=\"mb-4\">\n        <CCol md={{ span: 10, offset: 1 }} lg={{ span: 8, offset: 2 }} xl={{ span: 6, offset: 3 }}>\n          <ComparisonChart\n            labels={Object.values(labels)}\n            studentData={studentData}\n            classData={norm}\n          />\n        </CCol>\n      </CRow>\n\n      <h4>Your Progress</h4>\n      <CRow>\n        {Object.keys(labels).map((key, index) => (\n          <CCol key={key} sm={3} xs={6}>\n            <MetricCallout label={labels[key]} value={studentData[index]} />\n          </CCol>\n        ))}\n      </CRow>\n    </React.Fragment>\n  )\n}\n\nconst toRelativeScale = (data, otherData) => {\n  return data.map((value, index) => {\n    const otherValue = otherData[index]\n    return ((value / otherValue) * 100).toFixed(2)\n  })\n}\n\nStudentActivity.propTypes = {\n  user: PropTypes.object,\n}\n\nexport default StudentActivity\n","import React from 'react'\nimport { CContainer } from '@coreui/react'\nimport PropTypes from 'prop-types'\nimport SemesterSetup from 'src/components/dashboard/setup/SemesterSetup'\nimport StudentActivity from './StudentActivity'\n\nconst Dashboard = (props) => {\n  return (\n    <CContainer>\n      <StudentActivity user={props.user} />\n\n      <br />\n      <br />\n      <br />\n      <SemesterSetup />\n    </CContainer>\n  )\n}\n\nDashboard.propTypes = {\n  user: PropTypes.object,\n}\n\nexport default Dashboard\n"],"sourceRoot":""}